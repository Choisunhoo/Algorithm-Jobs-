# include <stdio.h>

const int MAX = 10; 

// x 정점과 y 정점이 간선으로 연결되어 있는지에 대한 확인 여부를 위한 함수 
bool isConnected(int myGraph[MAX][MAX], int x, int y){
  
  //if(myGraph[x][y] == 1) return true;
  //else return false;

  return myGraph[x][y] == 1 ? true : false; 
}

// x 정점에 간선으로 연결된 모든 정점을 출력하는 함수  
void getAdj(int myGraph[MAX][MAX], int n, int x) {

  for (int i = 1; i <= n; i ++) {
    if (myGraph[x][i] == 1) printf("%d ",i); 
  }
}

int main() {
  // n : 정점의 갯수 m: 간선의 갯수 를 저장할 변수 선언 
  int n, m;
  // 그래프를 저장할 2차원 리스트 생성 
  int myGraph[MAX][MAX] = {0,};
  // 정점과 간선의 갯수를 입력 
  scanf("%d %d", &n, &m); 

  for(int i = 0; i < m; i++) {
    int a, b; 

    // 간선으로 연결되어 있는 2개의 정점 입력 
    scanf("%d %d", &a, &b); 
    // 그래프에 저장 
    myGraph[a][b] = 1;
    myGraph[b][a] = 1; 
  }

  // 반복문을 통해서 인접 행렬을 출력 
  for(int i = 1; i <= n; i++){
    for(int j = 1; j <= n; j++){
      printf("%d ", myGraph[i][j]); 
    }
    printf("\n");
  }
  
  // 정점 1과 2, 1과 5, 3과 5가 연결되어 있는지를 확인
  printf("%d\n", isConnected(myGraph, 1, 2)); 
  printf("%d\n", isConnected(myGraph, 1, 5)); 
  printf("%d\n", isConnected(myGraph, 3, 5)); 

  // 정점 2와 4에 연결되어있는 정점 출력  
  getAdj(myGraph, n, 2);
  getAdj(myGraph, n, 4);
  
  return 0; 
}
