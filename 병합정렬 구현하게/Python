# include <stdio.h>

void merging(int arr[], int s1, int e1, int s2, int e2){
  // p 와 q의 현재 최솟값을 가르키는 변수를 생성
  int p, q;
  // 합쳐진 결과를 저장하는 임시 변수
  int temp[100]; 
  int temp_inx = 0;

  p = s1; 
  q = s2; 

  // 범위를 벗어나지 않는 선에서 반복문을 반복 
  while (p <= e1 && q <= e2) {
    // q의 값이 p보다 크다면 
    if (arr[p] <= arr[q]) {
      // 인덱스를 추가해주면서 하나씩 쌓고 적은 값이 arr[p]를 temp에 넣어줌
      temp[temp_inx++] = arr[p];
      p++;       
    }
    // 아닌경우 인덱스를 추가해주면서 하나씩 쌓고 적은 값이 arr[q]를 temp에 넣어줌
    else {
      temp[temp_inx++] = arr[q];
      q++;
    }    
  }
  // q의 원소가 남은 경우    
  if (p > e1) {
  // q의 나머지원소들을 차례대로 넣어줌
    for (int i=q; i <= e2; i++)    
      temp[temp_inx++] = arr[i];
  }
  // p의 원소가 남은 경우
  else{
    // p의 나머지원소들을 차례대로 넣어줌
    for (int i=p; i<=e1; i++)
      temp[temp_inx++] = arr[i];
  }
  for (int i = s1; i <= e2; i++) {
    arr[i] = temp[i-s1];
  }
}


// arr의 start부터 end까지를 합병정렬하는 함수
void mergeSort(int arr[], int start, int end){

  // 기저 조건: 만약 시작점이 끝점보다 index상 더 뒤에 있는 경우(큰경우) 함수 종료 
  if (start >= end)
    return; 

  else{
    // 중간 값을 구해줌
    int mid = (start+end) / 2;
    // 왼쪽 절반을 합병정렬
    mergeSort(arr, start, mid); 
    // 오른쪽 절반을 합병 정렬 
    mergeSort(arr, mid+1, end); 
    // 둘을 합쳐줌 
    merging(arr, start, mid, mid+1, end);
  }
}

int main(){
  // 정렬할 숫자의 개수와 수열을 저장할 변수를 만듬 
  int n; 
  int numbers[100];
  
  // 정렬할 숫자의 개수 입력 
  scanf("%d", &n);
  // 반복문을 통해서 숫자를 입력 및 저장 
  for (int i = 0; i < n; i++)
    scanf("%d", &numbers[i]); 

  // 병합 정렬을 시작(, 수열,index 0 ~ n-1번까지)
  mergeSort(numbers, 0, n-1);

  for (int i=0; i < n; i++)
    printf("%d ", numbers[i]);
  return 0; 
}
