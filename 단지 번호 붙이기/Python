# 지도의 크기 n을 입력 
n = int(input())
# 지도의 정보를 저장할 리스트 생성 
graph = []
# 지도의 정보 입력 
for _ in range(n):
  graph.append(list(map(int, input())))

# 총 단지의 수를 저장할 변수 생성         
cnt = 0 
# 단지내의 집의 수를 저장할 리스트 생성 
answer = []

# 방향 백터를 저장 
dx = [1, -1, 0, 0]
dy = [0, 0, 1, -1]

# 깊이 우선 탐색 함수 생성(x, y)좌표 
def dfs(x, y):
  # 단지내 집의 수를 저장할 전역 변수를 
  global number
  # 만약 지정된 자표에 집이 있다면 
  if graph[x][y] == 1: 
    # 단지내 집의 수를 증가 
    number += 1 
    # 단지를 방문 처리 
    graph[x][y] = -1
    # 반복문을 통해서 방향 백터 사용 
    for i in range(4):
      nx = x + dx[i]
      ny = y + dy[i]
      # 만약 지도안에 있다면 방향 백터를 사용한 좌표로 깊이 우선탐색 
      if 0 <= nx < n and 0 <= ny < n:
        dfs(nx, ny)
        
# 반복문을 통해서 지도의 0, 0 ~ n, n 까지 탐색 
for i in range(n):
  for j in range(n):
    #  단지내 집의 수를 저장할 변수 초기화
    number = 0 
    # 만약 지정된 좌표에 집이 있다면 총 단지의 수 증가 및 깊이 우선탐색 함수 실행
    if graph[i][j] == 1:
      cnt += 1 
      dfs(i, j)
      # 집의 수를 리스트에 저장 
      answer.append(number)

# 리스트를 오름차순으로 정렬 
answer.sort()
# 결과 출력 
print(cnt)
for i in answer:
  print(i)
