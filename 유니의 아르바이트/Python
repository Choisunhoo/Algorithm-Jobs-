# 아르바이트 후보와 개수를 입력 받음
n, m = map(int, input().split())
# 아르바이트 후보들의 구간 합을 저장할 리스트 생성
data = [[0] for i in range(11)]
# n의 개수만큼 반복
for _ in range(n):
    # 아르바이트의 월급과 업종 번호를 저장
    a, b = map(int, input().split())
    # 업종별로 월급을 추가해줌
    data[b].append(a)
# 반복문을 통해서 업종 1~ 10까지 내림차순으로 정렬
for i in range(1, 10):
    data[i].sort(reverse=True)
    # 업종에 최소 1개 이상의 아르바이트가 있는경우에는
    if len(data[i]) > 1:
        # 점화식을 통해서 같은 업종을 할 경우 받는 월급을 구해줌
        for j in range(1, len(data[i])):
            data[i][j] = data[i][j] + data[i][j - 1] + (j * j + 1)
# 아르바이트의 개수별 받는 월급에 최대치를 저장할 리스트 생성
dp = [[[0] for _ in range(11)] for _ in range(m)]
# 1개를 했을때의 최대갑과 업종을 저장할 변수 생성
tnt = 0
index  = 0
# 반복문을 통해서 업종이 하나이상 있는 아르바이트 리스트에 첫번째 변수의 크기 비교및 업종 저장
for i in range(1, 11):
    if len(data[i]) > 1:
        if data[i][0] > tnt:
           tnt = data[i][0]
           index = i
# 아르바이트 1개했을때의 가장 많이 받는 월급과 업종을 저장
dp[0][0] = tnt
dp[0][index] = 1

# 반복문을 통해서 2 ~ m 개까지의 아르바이트 개수가 늘어남에 따른 최대 월급을 구해줌
for i in range(1, m):
    # 총합은 i-1개의 업종에서 최대로 받을 수 있는 월급으로 초기화
    tnt = dp[i-1][0]
    # 업종의 개수만큼 반복
    for j in range(1, 11):
        # 업종당 최대값을 저장할 변수를 초기화
        result = 0
        # dp i번째에 index 1~11까지의 정보를 i-1번째에서 가져와서 갱신해줌
        dp[i][j] = dp[i-1][j]
        # 만약 j번째 index의 data가 있는 경우
        if len(data[j]) > 1:
            # j가 지금까지 한번도 안쓰였으면 i-1번째 최대값 + j번째 데이터의 첫번째 값을 더해줌
            if dp[i-1][j] == [0]:
                result = dp[i-1][0] + data[j][0]
            # 그 외의 사용된적이 있고 길이가 충분한 경우
            elif dp[i-1][j] >= 1 and dp[i-1][j] < len(data[j] - 1):
                # i-1번째 최대값에 dp[i-1][j] 값을 추가해줌
                y = dp[i-1][j]
                result = dp[i-1][0] - data[j][y-1] + data[j][y]
        # 만약 결과값이 기존에 있던 값보다 큰경우 결과 최대값 초기화 및 index를 저장
        if result > tnt:
            tnt = result
            index = j
    # index의 지금까지 사용여부에 따른 dp 테이블의 값을 갱신
    if dp[i-1][index] == [0]:
        dp[i][index] = 1
        dp[i][0] = tnt
    else:
        dp[i][index] = dp[i-1][index] + 1
        dp[i][0] = tnt
# 결과값 출력
print(dp[m-1][0])
