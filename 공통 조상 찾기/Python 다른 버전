# 런타임 오류를 피하기 위해서 sys라이브러리 사용 
import sys 
sys.setrecursionlimit(int(1e5))

# 노드의 개수, 공통조상을 구할 자식을 입력 
n, x, y = map(int, input().split())

# 부모 노드 정보
parent = [0] * (n+1)
# 각 노드까지의 깊이 
d = [0] * (n+1)
# 각 노드가 계산되었는지 여부 
c = [0] * (n+1)
# 그래프의 정보 
graph = [[] for _ in range (n+1)]

# 그래프의 정보 입력 
for _ in range(n-1):
  a, b = map(int, input().split())
  graph[a].append[b]
  graph[b].append[a]

# 루트 노드부터 시작하여 깊이를 구하는 함수 생성
def dfs(x, depth):
  c[x] = True
  d[x] = depth
  for y in graph[x]:
    if c[y]:
      continue
    parent[y] = x
    dfs(y, depth + 1)

# A와 B의 최소 공통 조상을 찾는 함수 생성 
def lca(a, b):
  while d[a] != d[b]:
    if d[a] > d[b]:
      a = parent[a]
    else:
      b = parent[b]
    
  while a != b:
    a = parent[a]
    b = parent[b]
  return a

#깊이를 구함
dfs(1, 0)

# 공통조상을 찾음 
lca(x, y)
