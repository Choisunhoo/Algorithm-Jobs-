#include <stdio.h>

// 큐의 최대 범위를 저장 
const int MAX = 10; 

struct Queue {
    // 큐를 넣을 리스트 생성
    int data[MAX];
    // 큐의 맨 앞과 맨 뒤를 저장하는 변수 선언 
    int f, r; 
    // 큐의 크기를 저장할 변수 선언 
    int capacity; 
    
    int numElement;
    // 큐를 만드는 함수 생성
    void create(int y) {
        // 큐의 최대크기 를 저장 
        capacity = y;
        // 처음에는 맨앞과 뒤는 0으로 초기화 
        f = 0; 
        r = 0;
        // 원소의 개수를 저장하는 변수 초기화
        numElement = 0; 
    }
    // 원소를 집어 넣는 함수 생성 
    void push(int y) {
        // 원소의 개수가 최대 크기보다 큰 경우에는 Queue overflow 임으로 경고 메세지 출력 
        if(numElement >= capacity) {
            printf("Queue overflow!\n");
        }
        // 그렇지 않은 경우에는 맨끝을 나타내는 변수 rear을 추가해주고 int y를 저장 해준다. 만약 r이 큐의 최대 수용범위보다 높은경우 초기화 후 원소의 개수 추가 
        else {
            data[r] = y;
            r = (r+1) % MAX;
            numElement ++; 
        }
    }
    // 원소를 빼주는 함수 생성 
    void pop() { 
        // 원소가 하나도 없는 경우 Queue overflow 임으로 경고 메세지 출력 
        if(numElement <= 0) {
            printf("Queue underflow!\n");
        }
        // 그렇지 않은 경우에는 Queue 맨앞으로 지정된 곳을 0으로 초기화 후 갱신 및 원소의 개수을 감소 
        else {
            data[f] = 0; 
            f = (f+1) % MAX; 
            numElement --; 
        }
    }
    // Queue에 가장 앞에 있는 원소를 반환하는 함수 생성 
    int front() {
        // 반환할 원소가 없는 경우 -1을 반환 
        if(numElement <= 0) {
            return -1;
        }
        // 그렇지 않은 경우 맨 앞에 있는 원소를 반환 
        else {
            return data[f];
        }    
    }
    // Queue의 크기를 반환하는 함수 생성 
    int size() {
        // 맨 뒤에서 맨 앞값을 뺀 정수를 반환
        return numElement;
    }
};

int main() {
    Queue q1; // 

    q1.create(4); //  / 3

    q1.push(1);  // 1     / 3
    q1.push(2);  // 1 2   / 3
    q1.push(3);  // 1 2 3 / 3
    q1.push(4);  // overflow
    q1.push(5);  // overflow 

    printf("%d\n", q1.front()); // 1

    q1.pop();    // 2 3    / 3
    q1.pop();    // 3      / 3

    printf("%d\n", q1.front()); // 3
    printf("%d\n", q1.size());  // 1

    q1.pop();    //        / 3
    q1.pop();    //        / 3 underflow

    printf("%d\n", q1.size());  // 0

    return 0;
}
