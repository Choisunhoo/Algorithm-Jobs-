# 이진탐색 함수 생성 
def binary_search(arr, target, start, end):
  # start가 end보다 클때까지 while 반복문 
  while start <= end:
    # mid 는 start와 end를 2로 나눈값
    mid = (start + end) // 2
    # 만약 mid의 값이 찾으려는 값과 같으면 그 값을 반환
    if arr[mid] == target:
      return mid
    # 만약 미드의 값이 찾으려는 값보다 크다면 end값 조정
    elif arr[mid] > target:
      end = mid -1
    # 만약 미드의 값이 찾으려는 값보다 작으면 start의 값 조정 
    else:
      start = mid + 1
  # 리스트안에 찾는 원소가 없는경우 None 반환
  return None    

# 수열의 개수와 찾으려는 원소의 개수를 입력
n, q = map(int, input().split())
# 수열을 arr 리스트에 저장
arr =  list(map(int, input().split()))
# 찾으려는 원소를 입력 
data = list(map(int, input().split()))

# 원소의 개수만큼 반복문
for i in data:
  # 정답 변수에 이진탐색 함수를 실행한 결과를 저장 
  answer = binary_search(arr, i, 0, n-1)
  # 만약 정답 변수가 None인경우 No 출력 
  if answer == None:
    print("NO")
  # 그외의 경우 YES 출력 
  else:
    print("YES")
