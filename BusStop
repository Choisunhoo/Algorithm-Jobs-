from collections import deque

def solution(city):
    dx = [0, 0, 1, -1]
    dy = [1, -1, 0, 0]

    h = len(city)
    w = len(city[0])

    def bfs(a, b):
        queue = deque()
        check = [[0] * w for _ in range(h)]
        check[a][b] = -1
        queue.append((a, b, 0))

        while queue:
            x, y, distance = queue.popleft()
            if city[x][y] == 0:
                return distance

            for i in range(4):
                nx = dx[i] + x
                ny = dy[i] + y
                if 0 <= nx < h and 0 <= ny < w and check[nx][ny] != -1:
                    check[nx][ny] = -1
                    queue.append((nx, ny, distance + 1))

    for i in range(h):
        for j in range(w):
            distance = bfs(i, j)
            city[i][j] = distance 

    return city
