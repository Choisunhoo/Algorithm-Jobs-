# permutations 을 사용하기 위해 itertools 라이브러리를 사용 
import itertools
# 가능한 숫자는 1~9까지 
number = [1, 2, 3, 4, 5, 6, 7, 8, 9]
# 1~9까지 겹치지 않는 3자리 수를 전부 구한후 리스트로 바꿔줌
possibles = list(itertools.permutations(number, 3))
# 가능한 정답의 개수 초기화
result = 0 

# 몇번 시도를 했는지를 입력 
n = int(input())
# 어떤 번호를 시도했고 스트라이크와 볼이 몇개 있는지를 저장
data = []
for _ in range(n):
    a, b, c = map(int, input().split())
    data.append([a, b, c])

# 완전 탐색 시작
for possible in possibles:
    # 시도한 횟수와 완전 탐색을 하는 수와 조건에 부합하는 지를 위한 cnt 초기화
    cnt = 0
    # 시도한 숫자들을 비교를 위해 불러옴 
    for i in range(n):
        # 비교하는 숫자의 스트라이크와 볼의 개수 초기화 
        s, b = 0, 0 
        # 백, 십, 일의 자리를 구해줌 
        h = data[i][0] // 100
        t = (data[i][0] - (h * 100)) // 10 
        o = data[i][0] % 10 
        # 완전 탐색하는 숫자가 원래 했던 숫자와 비교를 했을때 같은 자리에 같은 수가 있으면 스트라이크 +1 같은자리는 아니지만 그 안에 있으면 볼 +1 
        if h == possible[0]: 
            s += 1
        elif h in possible:
            b += 1
        if t == possible[1]: 
            s += 1
        elif t in possible:
            b += 1
        if o == possible[2]: 
            s += 1
        elif o in possible:
            b += 1
        # 3자리를 전부 비교한후 볼과 스트라이크가 같으면 n개의 조건중에 하나가 부합함으로 cnt + 1
        if s == data[i][1] and b == data[i][2]:
            cnt += 1
    # n번의 시도가 끝나고 n개의 스트라이크와 볼에 부합한 경우 가능한 수로 결과 값에 +1을 해줌 
    if cnt == n:
        result += 1
        
# 결과 출력
print(result)
