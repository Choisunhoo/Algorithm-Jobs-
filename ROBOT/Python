# bfs를 위해 deque를 가져옴 
import sys 
from collections import deque
input = sys.stdin.readline

#     동 서 남 북 의 방향 백터 
dx = [0, 0, 1, -1] 
dy = [1, -1, 0, 0]
# 이동방향이 동이나 서인 경우에는 남과 북으로 방향을 바꾸고 남이나 북인 경우에는 동이나 서인경우로 바꿀 수 있게 지정 
change_d = [[2, 3], [2, 3], [0, 1], [0, 1]]

# bfs 함수 시작 
def bfs():
    # 방문여부를 확인할 리스트 생성
    visited = [[[0] * 4 for _ in range(m)] for _ in range(n)]
    # 시작 지점을 방문 처리함 
    visited[sx-1][sy-1][sd-1] = 1
    # 큐 생성이후 시작지점과 방향 그리고 이동 횟수를 추가시킴 
    q = deque([(sx-1, sy-1, sd-1, 0)])
    
    # q에 원소가 없을때 까지 반복문 반복
    while q:
        # x, y 좌표와 d 방향 이동횟수를 큐에 원소로 부터 가져옴
        x, y, d, cnt = q.popleft()
        # 만약 x y 좌표및 방향이 입력된 끝지점과 방향과 같을경우 이동횟수를 반환
        if (x, y, d) == (ex-1, ey-1, ed-1):
            return cnt
        
        # 반복문을 통해서 정해진 방향으로 1 2 3 만큼 이동 
        for i in range(1, 4):
            nx = x + dx[d] * i
            ny = y + dy[d] * i
            # 만약 지정된 범위를 넘거나 그래프에 없는 경우에는 더이상 반복문 종료
            if not (0 <= nx < n and 0 <= ny < m) or graph[nx][ny]:
                break 
            # 만약 이미 방문처리가 된경우 continue 
            if visited[nx][ny][d]:
                continue
            # 그외의 경우에는 q에 이동 횟수를 추가시킴
            q.append((nx, ny, d, cnt+1))

        # 방향을 이동시켜줌
        for nd in change_d[d]:
            # 만약 이동시키려는 방향이 이미 방문이 끝났다면 continue 
            if visited[x][y][nd]:
                continue
            # 그외의 경우에는 x, y좌표는 같게 이동방향은 변경 이동횟수는 1을 추가
            q.append((x, y, nd, cnt+1))
            # 방문여부를 갱신
            visited[x][y][nd] = 1 
              


n, m = map(int, input().split())
graph = [list(map(int, input().split())) for _ in range(n)]
sx, sy, sd = map(int, input().split()) 
ex, ey, ed= map(int, input().split()) 

# 결과 출력
print(bfs())
