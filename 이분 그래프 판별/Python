# DFS함수 시작 (X(노드)CHECK(2개로 나누기위한수))
def dfs(x, check):
  # 방문 여부 확인 리스트에 CHECK를 저장 
  visited[x] = check
  # 노트와 연결되어 있는 수들을 반복문을 통해서 실행 
  for i in data[x]:
    # 만약 확인이 안되어있는 노드인경우 SUB_ANSWER 의 결과 값을 I 노드와 -CHECK인 DFS함수 실행
    if visited[i] == 0:
      sub_answer = dfs(i, -check)
      # 만약 결과 값이 FALSE 인 경우 FALSE RETURN 
      if not sub_answer:
        return False
    # 만약 이미 방문여부 리스트에서 연결된 노드가 같은 값인 경우 FALSE RETURN
    elif visited[i] == visited[x]:
      return False
  # 그 외의 경우에는 TRUE 출력 
  return True

# 노드의 개수와 간선의 갯수를 입력 받음 
n, m = map(int, input().split())

# 노드와 간선의 연결관계를 저장할 리스트 생성
data = [[] for i in range(n+1)]

# 방문 여부 확인을 위한 리스트 생성 
visited = [0] * (n + 1)

# 반복문을 통해서 간선 정보를 받고 리스트에 저장 
for i in range(m):
  a, b = map(int, input().split())
  data[a].append(b)
  data[b].append(a)

# 결과 값을 초기화 
answer = True 

# 반복문을 통해서 방문 하지 않은 경우 DFS함수를 실행 
for i in range(1, n+1):
  if visited[i] == 0:
    answer = dfs(i, 1)
    # 만약 DFS의 결과 값이 FALSE인 경우에 반복문 종료 
    if not answer:
      break

# 만약 결과 값이 참일 경우 Yes 아닐경우 No 출력 
if answer == True:
  print("Yes")
else:
  print("No")
