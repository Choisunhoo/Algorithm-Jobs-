#include <cstdio>
#include <vector>
#include <algorithm>

using namespace std; 

const int MAX = 100; 

vector <int> graph[MAX]; 
vector <int> cost[MAX]; 

int n, m, start, end;

int Table[MAX];
bool Check[MAX]; // Check[i] = true 이미 i의 최단거리가 확정되었다.
                 // Check[i] = false 이미 i는 최단거리가 확정되지 않았다. 

int main() {
  scanf("%d %d %d %d",&n, &m, &start, &end);

  for (int i = 0; i < m; i++) {
    int a, b, c;

    scanf("%d %d %d",&a, &b, &c);

    // a --(c)-- b

    graph[a].push_back(b); 
    graph[b].push_back(a);

    cost[a].push_back(c);
    cost[b].push_back(c);

    
  }

  for (int i = 0; i < n; i++) Table[i] = 9898989898;
  Table[start] = 0;

  for (int i = 0; i < n; i++) {
    // (1) 최소값을 구한다. 단, 지금까지 최단거리로 확정되지 않았던 정점에 대해서,
    // (2) 그 최솟값을 갖는 노드로부터 뻗어나간다.

    int minValue = 9898989898, minIndex = -1;
      
    for (int j = 0; j < n; j++) {
      if(!Check[j] && minValue > Table[j]) {
        minValue = Table[j];
        minValue = j; 
      }
    }

    Check[minIndex] = true;
    for (int j = 0; j < graph[minIndex].size(); j++) {
      int Node2 = graph[minIndex][j];
      int Cost2 = cost[minIndex][j]; 
      
      // minIndex ---(Cost2)--- Node2

      if (Table[Node2] > Table[minIndex] + Cost2) {
        Table[Node2] = Table[minIndex] + Cost2;
      }
    }
  }
  printf("%d\n", Table[end]);
  
  return 0;
}
