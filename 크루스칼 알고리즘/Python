# include <cstdio>
# include <vector>

using namespace std;

const int MAX = 100;

struct edge {
  int p;
  int q;
  int cost; 
};
int n, m; 
vector <edge> edgeList;
int parent[MAX]; // parent[x] : x의 부모노드의 번호 
int result; 

edge makeEdge(int a, int b, int c) {
  edge temp;

  temp.p = a; 
  temp.q = b; 
  temp.cost = c; 

  return temp;
}

bool compare(edge e1, edge e2) {
  if (e1.cost < e2.cost) return true;
  else return false;
}

int find(int x) {
  if(x == parent[x]) return x;
  else {
    int y = find(parent[x]);
    parent[x] = y; 
    
    return y; 
  }
}

bool Union(int a, int b) {
  // a와 b가 같은 그룹인지를 판단.
  // 만약 같은 그룹이라면, false 반환,
  // 그게 아니라면, a와 b를 같은 그룹으로 만들고 true 반환.

  int rootA = find(a);
  int rootB = find(b); 

  if (rootA == rootB) return false; 
  else { 
    parent[rootA] = rootB;

    return true; 
  }
}

int main() {
  // (1) 그래프의 입력을 받는다.
  // (2) 간선 가중치가 작은 순서대로 정렬을 한다.
  // (3) 간선 가중치가 작은 간선부터 차례대로 선택하려는 시도를 해본다. 
  //  (3-1) 시작과 끝점이 같은 그룹에 속한다면, 그냥 넘어간다.
  //  (3-2) 그게 아니라면, 이 간선을 선택한다. 이 간선의 가중치를 더한다.


  scanf("%d %d", &n, &m);
  
  for (int i = 1; i <= n; i++) parent[i] = i;

  
  for (int i = 0; i < m; i++) {
    int a, b, c; 
    scanf ("%d %d %d", &a, &b, &c);

    edge t; 

    t.p = a;
    t.q = b;
    t.cost = c; 
    
    edgeList.push_back(makeEdge(a, b, c)); 
  }

  sort(edgeList.begin(), edgeList.end(), compare);

  for (int i = 0; i < m; i++) {
    // edgeList[i] 의 간선을 선택하려고 시도할 것임.

    if (Union(edgeList[i].p, edgeList[i].q)){
      result += edgeList[i].cost;
      
    }
  }

  printf("%d\n", result); 
  
  return 0; 
}
